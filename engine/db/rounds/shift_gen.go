package rounds

// Code generated by shiftgen at shift.go:10. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"strings"
	"time"

	"github.com/luno/jettison/errors"
	"github.com/luno/shift"
)

// Insert inserts a new engine_rounds table entity. All the fields of the 
// joinReq receiver are set, as well as status, created_at and updated_at. 
// The newly created entity id is returned on success or an error.
func (一 joinReq) Insert(ctx context.Context, tx *sql.Tx,st shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("insert into engine_rounds set `status`=?, created_at=?, updated_at=? ")
	args = append(args, st.ShiftStatus(), time.Now(), time.Now())

	q.WriteString(", `match_id`=?")
	args = append(args, 一.MatchID)

	q.WriteString(", `index`=?")
	args = append(args, 一.Index)

	q.WriteString(", `team`=?")
	args = append(args, 一.Team)

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

// Update updates the status of a engine_rounds table entity. All the fields of the
// joinedReq receiver are updated, as well as status and updated_at. 
// The entity id is returned on success or an error.
func (一 joinedReq) Update(ctx context.Context, tx *sql.Tx,from shift.Status, 
	to shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update engine_rounds set `status`=?, updated_at=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(", `state`=?")
	args = append(args, 一.State)

	q.WriteString(" where id=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.New("unexpected number of rows updated")
	}

	return 一.ID, nil
}

// Update updates the status of a engine_rounds table entity. All the fields of the
// collectReq receiver are updated, as well as status and updated_at. 
// The entity id is returned on success or an error.
func (一 collectReq) Update(ctx context.Context, tx *sql.Tx,from shift.Status, 
	to shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update engine_rounds set `status`=?, updated_at=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(", `state`=?")
	args = append(args, 一.State)

	q.WriteString(" where id=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.New("unexpected number of rows updated")
	}

	return 一.ID, nil
}

// Update updates the status of a engine_rounds table entity. All the fields of the
// collectedReq receiver are updated, as well as status and updated_at. 
// The entity id is returned on success or an error.
func (一 collectedReq) Update(ctx context.Context, tx *sql.Tx,from shift.Status, 
	to shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update engine_rounds set `status`=?, updated_at=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(", `state`=?")
	args = append(args, 一.State)

	q.WriteString(" where id=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.New("unexpected number of rows updated")
	}

	return 一.ID, nil
}

// Update updates the status of a engine_rounds table entity. All the fields of the
// submitReq receiver are updated, as well as status and updated_at. 
// The entity id is returned on success or an error.
func (一 submitReq) Update(ctx context.Context, tx *sql.Tx,from shift.Status, 
	to shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update engine_rounds set `status`=?, updated_at=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(" where id=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.New("unexpected number of rows updated")
	}

	return 一.ID, nil
}

// Update updates the status of a engine_rounds table entity. All the fields of the
// submittedReq receiver are updated, as well as status and updated_at. 
// The entity id is returned on success or an error.
func (一 submittedReq) Update(ctx context.Context, tx *sql.Tx,from shift.Status, 
	to shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update engine_rounds set `status`=?, updated_at=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(", `state`=?")
	args = append(args, 一.State)

	q.WriteString(" where id=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.New("unexpected number of rows updated")
	}

	return 一.ID, nil
}

// Update updates the status of a engine_rounds table entity. All the fields of the
// successReq receiver are updated, as well as status and updated_at. 
// The entity id is returned on success or an error.
func (一 successReq) Update(ctx context.Context, tx *sql.Tx,from shift.Status, 
	to shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update engine_rounds set `status`=?, updated_at=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(" where id=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.New("unexpected number of rows updated")
	}

	return 一.ID, nil
}

// Update updates the status of a engine_rounds table entity. All the fields of the
// failedReq receiver are updated, as well as status and updated_at. 
// The entity id is returned on success or an error.
func (一 failedReq) Update(ctx context.Context, tx *sql.Tx,from shift.Status, 
	to shift.Status) (int64, error) {
	var (
		q    strings.Builder
		args []interface{}
	)

	q.WriteString("update engine_rounds set `status`=?, updated_at=? ")
	args = append(args, to.ShiftStatus(), time.Now())

	q.WriteString(", `error`=?")
	args = append(args, 一.Error)

	q.WriteString(" where id=? and `status`=?")
	args = append(args, 一.ID, from.ShiftStatus())

	res, err := tx.ExecContext(ctx, q.String(), args...)
	if err != nil {
		return 0, err
	}
	n, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	if n != 1 {
		return 0, errors.New("unexpected number of rows updated")
	}

	return 一.ID, nil
}
